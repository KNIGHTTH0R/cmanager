<?php
namespace App\Controller;

use App\Controller\AppController;
use function MongoDB\BSON\toJSON;

/**
 * Ratings Controller
 *
 * @property \App\Model\Table\RatingsTable $Ratings
 *
 * @method \App\Model\Entity\Rating[] paginate($object = null, array $settings = [])
 */
class RatingsController extends AppController
{

    /**
     * Index method
     *
     * @return \Cake\Http\Response|void
     */
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    public function index()
    {
        $this->paginate = [
            'contain' => ['Users', 'Revievers']
        ];
        $ratings = $this->paginate($this->Ratings);

        $this->set(compact('ratings'));
        $this->set('_serialize', ['ratings']);
    }

    /**
     * View method
     *
     * @param string|null $id Rating id.
     * @return \Cake\Http\Response|void
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $rating = $this->Ratings->get($id, [
            'contain' => ['Users', 'Revievers']
        ]);

        $this->set('rating', $rating);
        $this->set('_serialize', ['rating']);
    }

    /**
     * Add method
     *
     * @return \Cake\Network\Response|void Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        //Before Rating we just check if the user has already rated today or not
        $this->checkIfRated();
        //
        $ExtraInfo=$this->loadComponent('Extra_info');
        $current_user=$ExtraInfo->getCurrentUser($this);
        $currentUserType=$ExtraInfo->getCurrentType($this);
        if($this->request->is('post')){
            //Recieving Data and arranging it
            $data=$this->request->getData();
            $avg_rating=$this->getAverageRatings($data);
            $note=$data['note_of_advice'];
            //done
            //Saving User Data
            $entity=$this->Ratings->newEntity();
            $entity->user_id=$current_user;
            $entity->reviever_id=$current_user;
            $entity->rating_points=$avg_rating;
            $entity->note_of_advice=$note;
            $ExtraInfo->setCreatedBy($entity,$current_user);
            $ExtraInfo->setModifiedBy($entity,$current_user);

//                debug($entity);
            if($avg_rating != 0 && $note != ''){
                try{
                    if($this->Ratings->save($entity)){
                        $this->Flash->success(__('Your Response Have Been Recorded'));
                        return $this->redirect(['action' => 'index']);
                    }
                    $this->Flash->error('Some Error Occured in recording your Response. Please Try Sometime Later');
                }catch (\Exception $e){
                    return $this->redirect(['action' => 'rateError','err'=>'1']);
                }
            }
            else{
                $this->Flash->error('Please Fill Out all the Details Properly');
            }
        }
    }

    /**
     * Edit method
     *
     * @param string|null $id Rating id.
     * @return \Cake\Network\Response|void Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $ExtraInfo=$this->loadComponent('Extra_info');
        $current_user=$ExtraInfo->getCurrentUser($this);
        $currentUserType=$ExtraInfo->getCurrentType($this);
        $rating = $this->Ratings->get($id, [
            'contain' => []
        ]);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $rating = $this->Ratings->patchEntity($rating, $this->request->data);
            $ExtraInfo->setModifiedBy($rating,$current_user);
            if ($this->Ratings->save($rating)) {
                $this->Flash->success(__('The {0} has been saved.', 'Rating'));
                return $this->redirect(['action' => 'index']);
            } else {
                $this->Flash->error(__('The {0} could not be saved. Please, try again.', 'Rating'));
            }
        }
        //Here we get the type_id of the team leader for currently logged in user
        //than we get all those users who have type_id less than the type_id of the logged in user
        //Also those users must be a part of the team to which user belongs
        //In this way a user will be able to send the ratings to the users having better type (High ranking)
        $leader=$ExtraInfo->getTeamLeader($this,$current_user);
        $users=$this->getHigherMembersOfTeam($leader,$current_user,$currentUserType);
        //done


//        $users = $this->Ratings->Users->find('list', ['limit' => 200]);
        $revievers = $this->Ratings->Revievers->find('list', ['limit' => 200]);
        $this->set(compact('rating', 'users', 'revievers'));
        $this->set('_serialize', ['rating']);
    }

    /**
     * Delete method
     *
     * @param string|null $id Rating id.
     * @return \Cake\Network\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $this->request->allowMethod(['post', 'delete']);
        $rating = $this->Ratings->get($id);
        if ($this->Ratings->delete($rating)) {
            $this->Flash->success(__('The {0} has been deleted.', 'Rating'));
        } else {
            $this->Flash->error(__('The {0} could not be deleted. Please, try again.', 'Rating'));
        }
        return $this->redirect(['action' => 'index']);
    }
    //This function gets all the members of the team to which user belongs and
    //than it gets those users whose type_id is less than the user's type_id
    public function getHigherMembersOfTeam($leader,$current_user,$current_user_type){
        $ExtraInfo=$this->loadComponent('Extra_info');
        $members=$ExtraInfo->getTeam($this,$leader,$current_user);
        $users=[];
        foreach ($members as $member){
            $user = $this->Ratings->Users->find('all')->where(['id'=>$member->user_id ,'AND'=>['type_id <'=>$current_user_type]])->first();
            if($user != null)
            {
                $user=$user->toArray();
                $users[$user['id']]=$user['first_name'].' '.$user['last_name'];
            }
        }
        return $users;
    }
    protected function getAverageRatings($data){
        $ratings=[];
        for ($i=1;$i<6;$i++){
            $rate=$this->getRatingValue($data["$i"]);
            array_push($ratings,$rate);
        }
        $average_rating=array_sum($ratings)/count($ratings);
        return $average_rating;
    }
    //done
    protected function getRatingValue($rate_string){
        $limits=explode(',',$rate_string);
        $rating=$limits[1]-$limits[0];
        return $rating;
    }
    //This function checks if the user has already rated or not for that day
    public function checkIfRated(){
        //Getting the logged in user id
        $ExtraInfo=$this->loadComponent('Extra_info');
        $current_user=$ExtraInfo->getCurrentUser($this);
        $today_date=date('Y/m/d');
        //check if the user has rated before today or not
        $users=$this->Ratings->find('all')->where(['user_id'=>$current_user ,'AND'=>['created'=>$today_date]]);
        $count=0; //It counts the number of times this user has rated today
        foreach ($users as $user){
            if($user->id != null){
                return $this->redirect(['action' => 'rateError','err'=>'1']);
            }
        }
        //Since not rated than just return true
        return true;
    }
    //This function redirects the user to the error page
    public function rateError(){
        $error_code=$this->request->getQuery('err');
        switch ($error_code){
            case 1 : $this->set('error','1');
                    break;
            default: $this->set('error','0');
                    break;
        }
    }
    //This function sorts the data into the json format so that the graph can be drawn
    public function reportJson(){

    }
}
