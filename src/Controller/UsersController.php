<?php
namespace App\Controller;

use App\Controller\AppController;
use App\Controller\Component\Extra_infoComponent;
use Cake\Datasource\ConnectionManager;
use function MongoDB\BSON\toJSON;

/**
 * Users Controller
 *
 * @property \App\Model\Table\UsersTable $Users
 *
 * @method \App\Model\Entity\User[] paginate($object = null, array $settings = [])
 */
class UsersController extends AppController
{

    /**
     * Index method
     *
     * @return \Cake\Http\Response|void
     */
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    public function index()
    {
        $this->paginate = [
            'contain' => ['Types']
        ];
        $users = $this->paginate($this->Users);

        $this->set(compact('users'));
        $this->set('_serialize', ['users']);
    }

    /**
     * View method
     *
     * @param string|null $id User id.
     * @return \Cake\Http\Response|void
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $user = $this->Users->get($id, [
            'contain' => ['Types']
        ]);

        $this->set('user', $user);
        $this->set('_serialize', ['user']);
    }

    /**
     * Add method
     *
     * @return \Cake\Network\Response|void Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $ExtraInfo=$this->loadComponent('Extra_info');
        $user = $this->Users->newEntity();
        if ($this->request->is('post')) {
            $user = $this->Users->patchEntity($user, $this->request->getData());
            $current_user=$ExtraInfo->getCurrentUser($this);
            $ExtraInfo->setCreatedBy($user,$current_user);
            $ExtraInfo->setModifiedBy($user,$current_user);
            if ($this->Users->save($user)) {
                $this->Flash->success(__('The {0} has been saved.', 'User'));
                return $this->redirect(['action' => 'index']);
            } else {
                $this->Flash->error(__('The {0} could not be saved. Please, try again.', 'User'));
            }
        }
        $types = $this->Users->Types->find('list', ['limit' => 200]);
        $this->set(compact('user', 'types'));
        $this->set('_serialize', ['user']);
    }

    /**
     * Edit method
     *
     * @param string|null $id User id.
     * @return \Cake\Network\Response|void Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $ExtraInfo=$this->loadComponent('Extra_info');
        $user = $this->Users->get($id, [
            'contain' => []
        ]);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $user = $this->Users->patchEntity($user, $this->request->getData());
            $current_user=$ExtraInfo->getCurrentUser($this);
            $ExtraInfo->setModifiedBy($user,$current_user);
            if ($this->Users->save($user)) {
                $this->Flash->success(__('The {0} has been saved.', 'User'));
                return $this->redirect(['action' => 'index']);
            } else {
                $this->Flash->error(__('The {0} could not be saved. Please, try again.', 'User'));
            }
        }
        $types = $this->Users->Types->find('list', ['limit' => 200]);
        $this->set(compact('user', 'types'));
        $this->set('_serialize', ['user']);
    }

    /**
     * Delete method
     *
     * @param string|null $id User id.
     * @return \Cake\Network\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $this->request->allowMethod(['post', 'delete']);
        $user = $this->Users->get($id);
        if ($this->Users->delete($user)) {
            $this->Flash->success(__('The {0} has been deleted.', 'User'));
        } else {
            $this->Flash->error(__('The {0} could not be deleted. Please, try again.', 'User'));
        }
        return $this->redirect(['action' => 'index']);
    }
    public function login(){
        $this->viewBuilder()->setLayout('');
        if($this->request->is('post'))
        {
            $user=$this->Auth->identify();

            if($user)
            {
                //Adding menus associated with the user
                $menus=$this->filterMenus($user['type_id']);
                $user['menus']=$menus;
//                debug($user);
//                die();
                //done
                //checking if the request type is set or not
                if(isset($this->request->getData()['rtype'])){
                    //if request type is json
                    if($this->request->getData()['rtype'] == 'json'){
                        echo json_encode($user);
                        die();
                    }
                    //if request is not json
                    else{
                        echo 'Please send a Json Request to proceed further';
                        die();
                    }
                }
                //if request type not set
                else{
                    //Now we set the user information into session vaiable
                    $this->Auth->setUser($user);
                    return $this->redirect($this->Auth->redirectUrl());
                }
            }
            $this->Flash->error('You have entered wrong credentials');
        }
    }
    protected function filterMenus($typeID){
        $user_menus=[];
        $m=$this->loadModel('Menus');
        $menus=$m->find('threaded')->contain('Types')->where(['display'=>1]);
//        debug($typeID);
        foreach ($menus as $menu) {
//            debug($menu);
            foreach ($menu->types as $menu_type){
                if($menu_type->id == $typeID)
                    array_push($user_menus,$menu);
                else
                    continue;
            }
        }
        return $user_menus;
    }
    public function logout()
    {
        return $this->redirect($this->Auth->logout());
    }
    public function reportJson(){
        $this->viewBuilder()->setLayout('');
        $connection=ConnectionManager::get('default');
        $query_one="SELECT COUNT(username) FROM users";
        $result_one=$connection->execute($query_one)->fetch('assoc');
        $total_users=$result_one['COUNT(username)'];
        $this->set(compact('total_users'));
        $this->set('_serialize', ['total_users']);
    }
    public function info(){
        $user = $this->request->getSession()->read('Auth.User');
        $feedbacks=$this->getFeedbacks();
        $this->set(compact('user','feedbacks'));
        $this->set('_serialize', ['user','feedbacks']);
    }
    protected function getFeedbacks(){
        $ExtraInfo=$this->loadComponent('Extra_info');
        $current_user=$ExtraInfo->getCurrentUser($this);
        $model=$this->loadModel('Feedbacks');
        $feedbacks=$model->find('all')->where(['user_id'=>$current_user])->contain('Recievers');
        return $feedbacks;
    }
    protected function getTotalProjects(){
        $ExtraInfo=$this->loadComponent('Extra_info');
        $current_user=$ExtraInfo->getCurrentUser($this);

        $UserProjects=[];
        $model=$this->loadModel('Teams');
        $teams=$model->find('all')->where(['user_id'=>$current_user])->contain('Leaders');
        foreach ($teams as $team){
            $project=[];
            $team_leader=$team->leader->first_name.' '.$team->leader->last_name;
            $leader_id=$team->leader->id;
            $project_id=$team->project_id;

            $team_members=$this->getTeamInfo($leader_id,$model);
            $proj=$this->getProjectInfo($project_id);

            $project['leader']=$team_leader;
            $project['team']=$team_members;
            $project['title']=$proj->title;
            $project['content']=$proj->description;

            array_push($UserProjects,$project);
        }
    }
    protected function getTeamInfo($leader,$model){
        $team=$model->find('all')->where(['leader_id'=>$leader])->contain('Users');
        $members=[];
        foreach ($team as $t){
            $member_name=$t->user->first_name.' '.$t->user_last_name;
            array_push($members,$member_name);
        }
        return $members;
    }
    protected function getProjectInfo($id){
        $project_info=$this->Projects->get($id);
        return $project_info;
    }
}
